var r,e,a;import{j as o}from"./jsx-runtime-D5LNt7Nr.js";import"./index-D0A7G-Z-.js";import"./_commonjsHelpers-lGe4XDVY.js";const l={Primary:[{name:"Primary",variable:"--color-primary"},{name:"Primary Hover",variable:"--color-primary-hover"},{name:"Primary Focus",variable:"--color-primary-focus"},{name:"Text on Primary",variable:"--color-text-on-primary",textColorVariable:"--color-text-default"}],Secondary:[{name:"Secondary",variable:"--color-secondary"},{name:"Secondary Hover",variable:"--color-secondary-hover"},{name:"Secondary Focus",variable:"--color-secondary-focus"},{name:"Text on Secondary",variable:"--color-text-on-secondary",textColorVariable:"--color-text-default"}],Neutral:[{name:"Gray 50",variable:"--color-neutral-gray-50"},{name:"Gray 100",variable:"--color-neutral-gray-100"},{name:"Gray 200",variable:"--color-neutral-gray-200"},{name:"Gray 300",variable:"--color-neutral-gray-300"},{name:"Gray 400",variable:"--color-neutral-gray-400"},{name:"Gray 500",variable:"--color-neutral-gray-500"},{name:"Gray 600",variable:"--color-neutral-gray-600"},{name:"Gray 700",variable:"--color-neutral-gray-700"},{name:"Gray 800",variable:"--color-neutral-gray-800"},{name:"Gray 900",variable:"--color-neutral-gray-900"},{name:"White",variable:"--color-neutral-white"},{name:"Black",variable:"--color-neutral-black"}],Backgrounds:[{name:"Background Default",variable:"--color-background-default"},{name:"Background Subtle",variable:"--color-background-subtle"},{name:"Surface Default",variable:"--color-surface-default"},{name:"Surface Hover",variable:"--color-surface-hover"},{name:"Surface Active",variable:"--color-surface-active"},{name:"Surface Raised",variable:"--color-surface-raised"}],Borders:[{name:"Border Default",variable:"--color-border-default"},{name:"Border Hover",variable:"--color-border-hover"},{name:"Border Subtle",variable:"--color-border-subtle"}],Text:[{name:"Text Default",variable:"--color-text-default",textColorVariable:"--color-background-default"},{name:"Text Muted",variable:"--color-text-muted",textColorVariable:"--color-background-default"},{name:"Text Disabled",variable:"--color-text-disabled",textColorVariable:"--color-background-default"},{name:"Text on Primary",variable:"--color-text-on-primary",textColorVariable:"--color-primary"},{name:"Text on Secondary",variable:"--color-text-on-secondary",textColorVariable:"--color-secondary"}],SemanticSuccess:[{name:"Success BG",variable:"--color-success-bg"},{name:"Success Text",variable:"--color-success-text",textColorVariable:"--color-success-bg"},{name:"Success Border",variable:"--color-success-border"},{name:"Success Icon",variable:"--color-success-icon"}],SemanticInfo:[{name:"Info BG",variable:"--color-info-bg"},{name:"Info Text",variable:"--color-info-text",textColorVariable:"--color-info-bg"},{name:"Info Border",variable:"--color-info-border"},{name:"Info Icon",variable:"--color-info-icon"}],SemanticWarning:[{name:"Warning BG",variable:"--color-warning-bg"},{name:"Warning Text",variable:"--color-warning-text",textColorVariable:"--color-warning-bg"},{name:"Warning Border",variable:"--color-warning-border"},{name:"Warning Icon",variable:"--color-warning-icon"}],SemanticError:[{name:"Error BG",variable:"--color-error-bg"},{name:"Error Text",variable:"--color-error-text",textColorVariable:"--color-error-bg"},{name:"Error Border",variable:"--color-error-border"},{name:"Error Icon",variable:"--color-error-icon"}]},n=({color:r})=>{const e={backgroundColor:`var(${r.variable})`},a=r.textColorVariable?{color:`var(${r.textColorVariable})`}:{};return o.jsxs("div",{className:"flex items-center space-x-3 mb-2",children:[o.jsx("div",{className:"w-10 h-10 rounded border border-gray-300 dark:border-gray-600 flex items-center justify-center text-xs font-mono",style:{...e,...a},children:r.textColorVariable?"Aa":""}),o.jsxs("div",{className:"flex-1",children:[o.jsx("div",{className:"font-medium text-sm",children:r.name}),o.jsx("div",{className:"text-xs font-mono text-gray-500 dark:text-gray-400",children:r.variable})]})]})},t=({theme:r="light"})=>o.jsx("div",{className:""+("dark"===r?"dark":""),children:o.jsx("div",{className:"p-4 bg-[--color-background-default] text-[--color-text-default]",children:Object.entries(l).map((([r,e])=>o.jsxs("div",{className:"mb-8",children:[o.jsxs("h3",{className:"text-lg font-semibold mb-3 capitalize border-b pb-1 border-[--color-border-default]",children:[r.replace(/([A-Z])/g," $1").replace(/^ /,"").replace(/Semantic /,"Semantic: ")," Colors"]}),o.jsx("div",{className:"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-x-4 gap-y-2",children:e.map((r=>o.jsx(n,{color:r},r.variable)))})]},r)))})}),c={title:"Foundations/Colors",component:t,parameters:{docs:{description:{component:'\n## Color System Documentation\n\nDisplays the foundational color palette used throughout the design system.\nColors are defined as CSS variables and support **light and dark themes**.\n\n### Naming Convention\nTokens follow the pattern: `--color-<category>-<name_or_value>`\n- **Category:** primary, secondary, neutral, success, info, warning, error, text, background, surface, border\n- **Name/Value:** Often a descriptive name (e.g., default, hover, subtle) or a scale value (e.g., gray-100).\n\n### Usage\nApply colors in components using Tailwind CSS utility classes with the CSS variable:\n```jsx\n<div className="bg-[--color-primary] text-[--color-text-on-primary]">...</div>\n<p className="text-[--color-text-muted]">...</p>\n<div className="border border-[--color-border-default]">...</div>\n```\n\n### Accessibility (WCAG)\n- **Contrast:** Always verify text has sufficient contrast against its background when using these tokens. A minimum ratio of **4.5:1** is required for normal text (AA standard).\n- **Semantic Colors:** Use semantic colors (Success, Info, Warning, Error) purposefully to convey meaning, but don\'t rely on color alone (provide icons or text).\n- **Dark Mode:** The same tokens are used, but their values change in dark mode. Ensure contrast remains compliant in both themes.\n        '}}}},i=(r=>o.jsx(t,{...r})).bind({});i.args={},i.parameters={...i.parameters,docs:{...null==(r=i.parameters)?void 0:r.docs,source:{originalSource:"args => <ColorTokens {...args} />",...null==(a=null==(e=i.parameters)?void 0:e.docs)?void 0:a.source}}};const s=["Palette"];export{i as Palette,s as __namedExportsOrder,c as default};
